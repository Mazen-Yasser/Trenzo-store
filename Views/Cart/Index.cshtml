@model IEnumerable<TrenzoStore.Models.Entities.CartItem>
@{
    ViewData["Title"] = "Shopping Cart";
    var cartItems = Model.ToList();
    var subtotal = cartItems.Sum(item => 
        (item.ProductVariant?.PriceAdjustment ?? 0) + item.Product.Price) * cartItems.Sum(item => item.Quantity);
    var tax = subtotal * 0.08m; // 8% tax
    var shipping = subtotal > 50 ? 0 : 9.99m; // Free shipping over $50
    var total = subtotal + tax + shipping;
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <h2><i class="fas fa-shopping-cart me-2"></i>Shopping Cart</h2>
            <hr>
        </div>
    </div>

    @if (cartItems.Any())
    {
        <div class="row">
            <div class="col-lg-8">
                @foreach (var item in cartItems)
                {
                    var itemPrice = item.Product.Price + (item.ProductVariant?.PriceAdjustment ?? 0);
                    var itemTotal = itemPrice * item.Quantity;
                    var primaryImage = item.Product.Images.FirstOrDefault(i => i.IsPrimary) ?? item.Product.Images.FirstOrDefault();
                    var imageUrl = primaryImage?.ImageUrl ?? "/images/placeholder-product.jpg";

                    <div class="card mb-3 cart-item" data-cart-item-id="@item.Id">
                        <div class="row g-0">
                            <div class="col-md-3">
                                <img src="@imageUrl" class="img-fluid rounded-start h-100" alt="@item.Product.Name" style="object-fit: cover;">
                            </div>
                            <div class="col-md-9">
                                <div class="card-body">
                                    <div class="row">
                                        <div class="col-md-6">
                                            <h5 class="card-title">@item.Product.Name</h5>
                                            <p class="card-text text-muted">@item.Product.ShortDescription</p>
                                            @if (item.ProductVariant != null)
                                            {
                                                <p class="card-text">
                                                    <small class="text-muted">
                                                        @if (!string.IsNullOrEmpty(item.ProductVariant.Size))
                                                        {
                                                            <span>Size: @item.ProductVariant.Size</span>
                                                        }
                                                        @if (!string.IsNullOrEmpty(item.ProductVariant.Color))
                                                        {
                                                            <span class="ms-2">Color: @item.ProductVariant.Color</span>
                                                        }
                                                    </small>
                                                </p>
                                            }
                                        </div>
                                        <div class="col-md-3">
                                            <div class="input-group">
                                                <button class="btn btn-outline-secondary quantity-btn" type="button" data-action="decrease">-</button>
                                                <input type="number" class="form-control text-center quantity-input" value="@item.Quantity" min="1" max="10">
                                                <button class="btn btn-outline-secondary quantity-btn" type="button" data-action="increase">+</button>
                                            </div>
                                        </div>
                                        <div class="col-md-3 text-end">
                                            <h5 class="text-primary">$@itemTotal.ToString("F2")</h5>
                                            <button class="btn btn-sm btn-outline-danger remove-item-btn">
                                                <i class="fas fa-trash"></i> Remove
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Order Summary -->
            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <span>$@subtotal.ToString("F2")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax:</span>
                            <span>$@tax.ToString("F2")</span>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Shipping:</span>
                            <span>@(shipping == 0 ? "FREE" : "$" + shipping.ToString("F2"))</span>
                        </div>
                        @if (shipping == 0)
                        {
                            <small class="text-success">
                                <i class="fas fa-check-circle"></i> Free shipping on orders over $50!
                            </small>
                        }
                        else
                        {
                            <small class="text-muted">
                                Add $@((50 - subtotal).ToString("F2")) more for free shipping
                            </small>
                        }
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total:</strong>
                            <strong class="text-primary">$@total.ToString("F2")</strong>
                        </div>
                        
                        <div class="d-grid gap-2">
                            @if (User.Identity?.IsAuthenticated == true)
                            {
                                <a asp-controller="Checkout" asp-action="Index" class="btn btn-dark btn-lg">
                                    <i class="fas fa-credit-card me-2"></i>Proceed to Checkout
                                </a>
                            }
                            else
                            {
                                <a asp-controller="Account" asp-action="Login" asp-route-returnUrl="@Url.Action("Index", "Checkout")" class="btn btn-dark btn-lg">
                                    <i class="fas fa-sign-in-alt me-2"></i>Login to Checkout
                                </a>
                            }
                            <a asp-controller="Products" asp-action="Index" class="btn btn-outline-dark">
                                <i class="fas fa-arrow-left me-2"></i>Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
            <h3>Your cart is empty</h3>
            <p class="text-muted">Looks like you haven't added any items to your cart yet.</p>
            <a asp-controller="Products" asp-action="Index" class="btn btn-dark">
                <i class="fas fa-shopping-bag me-2"></i>Start Shopping
            </a>
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Quantity update handlers
            $('.quantity-btn').click(function() {
                var cartItem = $(this).closest('.cart-item');
                var cartItemId = cartItem.data('cart-item-id');
                var quantityInput = cartItem.find('.quantity-input');
                var currentQuantity = parseInt(quantityInput.val());
                var action = $(this).data('action');
                
                var newQuantity = action === 'increase' ? currentQuantity + 1 : currentQuantity - 1;
                
                if (newQuantity < 1) {
                    if (confirm('Remove this item from cart?')) {
                        removeCartItem(cartItemId);
                    }
                    return;
                }
                
                updateCartItem(cartItemId, newQuantity);
            });
            
            $('.quantity-input').change(function() {
                var cartItem = $(this).closest('.cart-item');
                var cartItemId = cartItem.data('cart-item-id');
                var newQuantity = parseInt($(this).val());
                
                if (newQuantity < 1) {
                    $(this).val(1);
                    return;
                }
                
                updateCartItem(cartItemId, newQuantity);
            });
            
            // Remove item handlers
            $('.remove-item-btn').click(function() {
                if (confirm('Are you sure you want to remove this item from your cart?')) {
                    var cartItem = $(this).closest('.cart-item');
                    var cartItemId = cartItem.data('cart-item-id');
                    removeCartItem(cartItemId);
                }
            });
        });
        
        function updateCartItem(cartItemId, quantity) {
            $.post('/cart/update', {
                cartItemId: cartItemId,
                quantity: quantity,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(data) {
                if (data.success) {
                    location.reload(); // Reload to update totals
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .fail(function() {
                alert('An error occurred. Please try again.');
            });
        }
        
        function removeCartItem(cartItemId) {
            $.post('/cart/remove', {
                cartItemId: cartItemId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            })
            .done(function(data) {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .fail(function() {
                alert('An error occurred. Please try again.');
            });
        }
    </script>
}
